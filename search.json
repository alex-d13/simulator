[{"path":"https://omnideconv.org/SimBu/articles/SimBu.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting started with SimBu","text":"install developmental version package, run: install Bioconductor:","code":"install.packages(\"devtools\") devtools::install_github(\"omnideconv/SimBu\") if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"SimBu\") library(SimBu)"},{"path":"https://omnideconv.org/SimBu/articles/SimBu.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with SimBu","text":"complex tissues typically composed various cell types, deconvolution tools developed computationally infer cellular composition bulk RNA sequencing (RNA-seq) data. comprehensively assess deconvolution performance, gold-standard datasets indispensable. Gold-standard, experimental techniques like flow cytometry immunohistochemistry resource-intensive systematically applied numerous cell types tissues profiled high-throughput transcriptomics. simulation ‘pseudo-bulk’ data, generated aggregating single-cell RNA-seq (scRNA-seq) expression profiles pre-defined proportions, offers scalable cost-effective alternative. makes feasible create silico gold standards allow fine-grained control cell-type fractions conceivable experimental setup. However, present, simulation software generating pseudo-bulk RNA-seq data exists. SimBu developed simulate pseudo-bulk samples based various simulation scenarios, designed test specific features deconvolution methods. unique feature SimBu modelling cell-type-specific mRNA bias using experimentally-derived data-driven scaling factors. , show SimBu can generate realistic pseudo-bulk data, recapitulating biological statistical features real RNA-seq data. Finally, illustrate impact mRNA bias evaluation deconvolution tools provide recommendations selection suitable methods estimating mRNA content.","code":""},{"path":"https://omnideconv.org/SimBu/articles/SimBu.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Getting started with SimBu","text":"chapter covers need know quickly simulate pseudo-bulk samples! package can simulate samples local public data. vignette work artificially generated data serves overview features implemented SimBu. public data integration using sfaira (Fischer et al. 2020), please refer “Public Data Integration” vignette. create toy data use simulations; two matrices 300 cells 1000 genes/features. One represents raw count data, matrix represents scaled TPM-like data. assign cells immune cell types.","code":"counts <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm)) colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000)) annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(     rep(\"T cells CD4\", 50),     rep(\"T cells CD8\", 50),     rep(\"Macrophages\", 100),     rep(\"NK cells\", 10),     rep(\"B cells\", 70),     rep(\"Monocytes\", 20)   ) )"},{"path":"https://omnideconv.org/SimBu/articles/SimBu.html","id":"creating-a-dataset","dir":"Articles","previous_headings":"Getting started","what":"Creating a dataset","title":"Getting started with SimBu","text":"SimBu uses SummarizedExperiment class storage count data well annotation data. Currently possible store two matrices time: raw counts TPM-like data (can also scaled count matrix, RPKM, recommend use TPMs). two matrices dimensions contain genes cells. Providing raw count data mandatory! SimBu scales matrix added via tpm_matrix slot default 1e6 per cell, want , can switch setting scale_tpm parameter FALSE. Additionally, cell type annotation cells given dataframe, include two columns ID cell_type. additional columns annotation transferred dataset, simply give names additional_cols parameter. generate dataset can used SimBu, can use dataset() method; methods exist well, covered “Inputs & Outputs” vignette. SimBu offers basic filtering options dataset, can apply dataset generation: filter_genes: TRUE, genes expression values 0 cells removed. variance_cutoff: remove genes expression variance chosen cutoff. type_abundance_cutoff: remove cells, belong cell type appears less given amount.","code":"ds <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   tpm_matrix = tpm,   name = \"test_dataset\" ) #> Filtering genes... #> Created dataset."},{"path":"https://omnideconv.org/SimBu/articles/SimBu.html","id":"simulate-pseudo-bulk-datasets","dir":"Articles","previous_headings":"Getting started","what":"Simulate pseudo bulk datasets","title":"Getting started with SimBu","text":"now ready simulate first pseudo bulk samples created dataset: ncells sets number cells sample, nsamples sets total amount simulated samples. want simulate specific sequencing depth simulations, can use total_read_counts parameter . Note parameter applied counts matrix (supplied), TPMs scaled 1e6 default. SimBu can add mRNA bias using different scaling factors simulations using scaling_factor parameter. detailed explanation can found “Scaling factor” vignette. Currently 6 scenarios implemented package: even: creates samples, existing cell-types dataset appear proportions. using dataset 3 cell-types, simulate samples, cell-type fractions 1/3. order still slight variation cell type fractions, can increase balance_uniform_mirror_scenario parameter (default 0.01). Setting 0 generate simulations exactly cell type fractions. random: scenario create random cell type fractions using present types sample. random sampling based uniform distribution. mirror_db: scenario mirror exact fractions cell types present provided dataset. consists 20% T cells, 30% B cells 50% NK cells, simulated samples mirror fractions. Similar uniform scenario, can add small variation fractions balance_uniform_mirror_scenario parameter. weighted: need set two additional parameters simulate_bulk() function: weighted_cell_type sets cell-type want -representing weighted_amount sets fraction cell-type. example use B-cell 0.5 create samples, 50% B-cells rest filled randomly cell-types. pure: creates simulations one single cell-type. provide name cell-type pure_cell_type parameter. custom: able create set cell-type fractions. using scenario, additionally need provide dataframe custom_scenario_data parameter, row represents one sample (therefore number rows need match nsamples parameter). column represent one cell-type, also occurs dataset describes fraction cell-type sample. fractions per sample need sum 1. example can seen :","code":"simulation <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"NONE\",   ncells = 100,   nsamples = 10,   BPPARAM = BiocParallel::MulticoreParam(workers = 4), # this will use 4 threads to run the simulation   run_parallel = TRUE ) # multi-threading to TRUE #> Using parallel generation of simulations. #> Finished simulation. pure_scenario_dataframe <- data.frame(   \"B cells\" = c(0.2, 0.1, 0.5, 0.3),   \"T cells\" = c(0.3, 0.8, 0.2, 0.5),   \"NK cells\" = c(0.5, 0.1, 0.3, 0.2),   row.names = c(\"sample1\", \"sample2\", \"sample3\", \"sample4\") ) pure_scenario_dataframe #>         B.cells T.cells NK.cells #> sample1     0.2     0.3      0.5 #> sample2     0.1     0.8      0.1 #> sample3     0.5     0.2      0.3 #> sample4     0.3     0.5      0.2"},{"path":"https://omnideconv.org/SimBu/articles/SimBu.html","id":"results","dir":"Articles","previous_headings":"Getting started","what":"Results","title":"Getting started with SimBu","text":"simulation object contains three named entries: bulk: SummarizedExperiment object pseudo-bulk dataset(s) stored assays. can accessed like : single matrix given dataset initially, one assay filled. cell_fractions: table rows represent simulated samples columns represent different simulated cell-types. entries table store specific cell-type fraction per sample. scaling_vector: named list, used scaling value cell single cell dataset. also possible merge simulations: Finally barplot resulting simulation:","code":"head(SummarizedExperiment::assays(simulation$bulk)[[\"bulk_counts\"]]) #> 6 x 10 sparse Matrix of class \"dgCMatrix\" #>    [[ suppressing 10 column names 'random_sample1', 'random_sample2', 'random_sample3' ... ]] #>                                                #> gene_1 538 507 519 544 549 548 587 501 504 573 #> gene_2 506 497 473 513 509 498 525 493 465 476 #> gene_3 494 501 491 500 468 523 494 541 522 505 #> gene_4 484 491 516 471 497 504 478 519 499 532 #> gene_5 487 449 513 509 472 501 516 493 472 461 #> gene_6 494 456 533 488 477 520 474 517 463 534 head(SummarizedExperiment::assays(simulation$bulk)[[\"bulk_tpm\"]]) #> 6 x 10 sparse Matrix of class \"dgCMatrix\" #>    [[ suppressing 10 column names 'random_sample1', 'random_sample2', 'random_sample3' ... ]] #>                                                                              #> gene_1  951.4215 1045.8948  969.2988 1059.4576  941.1854  936.4756 1020.9840 #> gene_2  959.7814 1013.3972  934.0719 1021.9397  896.9235  992.7486  965.2803 #> gene_3 1011.7223 1068.4771  983.5854 1102.8118 1082.6267 1085.8680 1076.0715 #> gene_4 1102.0360 1073.7398  993.3672  997.7149 1038.4722  971.8080 1013.3734 #> gene_5  945.4091 1047.9675  937.7565  931.0628  951.4662 1004.9138  903.0717 #> gene_6  952.9738  939.7815 1015.7665  885.7218  858.0066  881.4596  831.4869 #>                                      #> gene_1  960.5017  972.4055  921.1230 #> gene_2  947.5805 1001.4620  964.6995 #> gene_3 1059.4597  976.0242 1076.8749 #> gene_4 1026.7938  940.4353 1056.7914 #> gene_5  974.9544  931.7359  905.7706 #> gene_6  977.2608  923.3878  984.2425 simulation2 <- SimBu::simulate_bulk(   data = ds,   scenario = \"even\",   scaling_factor = \"NONE\",   ncells = 1000,   nsamples = 10,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE ) #> Using parallel generation of simulations. #> Finished simulation. merged_simulations <- SimBu::merge_simulations(list(simulation, simulation2)) SimBu::plot_simulation(simulation = merged_simulations)"},{"path":[]},{"path":"https://omnideconv.org/SimBu/articles/SimBu.html","id":"simulate-using-a-whitelist-and-blacklist-of-cell-types","dir":"Articles","previous_headings":"More features","what":"Simulate using a whitelist (and blacklist) of cell-types","title":"Getting started with SimBu","text":"Sometimes, interested specific cell-types (example T cells), dataset using many cell-types; can handle issue simulation using whitelist parameter:  way, can also provide blacklist parameter, name cell-types don’t want included simulation.","code":"simulation <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"NONE\",   ncells = 1000,   nsamples = 20,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE,   whitelist = c(\"T cells CD4\", \"T cells CD8\") ) #> Using parallel generation of simulations. #> Finished simulation. SimBu::plot_simulation(simulation = simulation) sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] SimBu_1.1.3 #>  #> loaded via a namespace (and not attached): #>  [1] Rcpp_1.0.10                 lattice_0.20-45             #>  [3] tidyr_1.3.0                 rprojroot_2.0.3             #>  [5] digest_0.6.31               utf8_1.2.2                  #>  [7] R6_2.5.1                    GenomeInfoDb_1.34.7         #>  [9] stats4_4.2.2                evaluate_0.20               #> [11] highr_0.10                  ggplot2_3.4.0               #> [13] pillar_1.8.1                sparseMatrixStats_1.10.0    #> [15] zlibbioc_1.44.0             rlang_1.0.6                 #> [17] data.table_1.14.6           jquerylib_0.1.4             #> [19] S4Vectors_0.36.1            Matrix_1.5-1                #> [21] rmarkdown_2.20              pkgdown_2.0.7               #> [23] labeling_0.4.2              textshaping_0.3.6           #> [25] desc_1.4.2                  BiocParallel_1.32.5         #> [27] stringr_1.5.0               munsell_0.5.0               #> [29] RCurl_1.98-1.10             DelayedArray_0.24.0         #> [31] compiler_4.2.2              xfun_0.36                   #> [33] pkgconfig_2.0.3             systemfonts_1.0.4           #> [35] BiocGenerics_0.44.0         htmltools_0.5.4             #> [37] tidyselect_1.2.0            SummarizedExperiment_1.28.0 #> [39] tibble_3.1.8                GenomeInfoDbData_1.2.9      #> [41] IRanges_2.32.0              codetools_0.2-18            #> [43] matrixStats_0.63.0          fansi_1.0.4                 #> [45] dplyr_1.1.0                 withr_2.5.0                 #> [47] bitops_1.0-7                grid_4.2.2                  #> [49] gtable_0.3.1                jsonlite_1.8.4              #> [51] lifecycle_1.0.3             magrittr_2.0.3              #> [53] scales_1.2.1                RcppParallel_5.1.6          #> [55] cli_3.6.0                   stringi_1.7.12              #> [57] cachem_1.0.6                farver_2.1.1                #> [59] XVector_0.38.0              fs_1.6.0                    #> [61] bslib_0.4.2                 ragg_1.2.5                  #> [63] vctrs_0.5.2                 generics_0.1.3              #> [65] RColorBrewer_1.1-3          tools_4.2.2                 #> [67] Biobase_2.58.0              glue_1.6.2                  #> [69] purrr_1.0.1                 proxyC_0.3.3                #> [71] MatrixGenerics_1.10.0       parallel_4.2.2              #> [73] fastmap_1.1.0               yaml_2.3.7                  #> [75] colorspace_2.1-0            GenomicRanges_1.50.2        #> [77] memoise_2.0.1               knitr_1.42                  #> [79] sass_0.4.5"},{"path":[]},{"path":"https://omnideconv.org/SimBu/articles/sfaira_vignette.html","id":"sfaira-integeration","dir":"Articles","previous_headings":"","what":"Sfaira Integeration","title":"Public Data Integration using Sfaira","text":"vignette cover integration public database Sfaria.","code":""},{"path":"https://omnideconv.org/SimBu/articles/sfaira_vignette.html","id":"setup","dir":"Articles","previous_headings":"Sfaira Integeration","what":"Setup","title":"Public Data Integration using Sfaira","text":"public database, sfaira (Fischer et al. 2020) used, dataset model repository single-cell RNA-sequencing data. gives access multiple datasets human mouse 3 million cells total. can browse interactively : https://theislab.github.io/sfaira-portal/Datasets. Note annotated datasets downloaded! Also cases datasets, private URLs automatically downloaded; SimBu skip datasets. order use database, first need install . can easily done, running setup_sfaira() function first time. background use basilisik package establish conda environment sfaira dependencies installed. installation performed one single time, even close R session call setup_sfaira() . given directory serves storage future downloaded datasets sfaira:","code":"setup_list <- SimBu::setup_sfaira(basedir = tempdir())"},{"path":"https://omnideconv.org/SimBu/articles/sfaira_vignette.html","id":"creating-a-dataset","dir":"Articles","previous_headings":"Sfaira Integeration","what":"Creating a dataset","title":"Public Data Integration using Sfaira","text":"now create dataset samples human pancreas using organisms tissues parameter. can provide single word (like ) example list tissues want download: c(\"pancreas\",\"lung\"). additional parameter assays parameter, subset database download datasets certain sequencing assays (examples Smart-seq2). name parameter used later give sample (cell) unique name. Currently three datasets sfaira human pancreas, cell-type annotation. package download automatically merge together single expression matrix streamlined annotation table, can use simulation. can happen, datasets sfaira (yet) ready automatic download, error message appear R, telling file download put . wish see datasets included sfaira can use following command: allows find specific IDs datasets, can download directly:","code":"ds_pancrease <- SimBu::dataset_sfaira_multiple(   sfaira_setup = setup_list,   organisms = \"Homo sapiens\",   tissues = \"pancreas\",   name = \"human_pancreas\" ) all_datasets <- SimBu::sfaira_overview(setup_list = setup_list) head(all_datasets) SimBu::dataset_sfaira(   sfaira_id = \"homosapiens_lungparenchyma_2019_10x3v2_madissoon_001_10.1186/s13059-019-1906-x\",   sfaira_setup = setup_list,   name = \"dataset_by_id\" ) sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] SimBu_1.1.3 #>  #> loaded via a namespace (and not attached): #>  [1] knitr_1.42        magrittr_2.0.3    R6_2.5.1          ragg_1.2.5        #>  [5] rlang_1.0.6       fastmap_1.1.0     stringr_1.5.0     tools_4.2.2       #>  [9] xfun_0.36         cli_3.6.0         jquerylib_0.1.4   systemfonts_1.0.4 #> [13] htmltools_0.5.4   yaml_2.3.7        digest_0.6.31     rprojroot_2.0.3   #> [17] lifecycle_1.0.3   pkgdown_2.0.7     textshaping_0.3.6 purrr_1.0.1       #> [21] sass_0.4.5        vctrs_0.5.2       fs_1.6.0          memoise_2.0.1     #> [25] glue_1.6.2        cachem_1.0.6      evaluate_0.20     rmarkdown_2.20    #> [29] stringi_1.7.12    compiler_4.2.2    bslib_0.4.2       desc_1.4.2        #> [33] jsonlite_1.8.4"},{"path":"https://omnideconv.org/SimBu/articles/simulator_input_output.html","id":"input","dir":"Articles","previous_headings":"","what":"Input","title":"Inputs and Outputs","text":"input simulations always SummarizedExperiment object. can create object different constructing functions, explained . also possible merge multiple datasets objects one. Sfaira covered vignette, “Public Data Integration”.","code":""},{"path":"https://omnideconv.org/SimBu/articles/simulator_input_output.html","id":"custom-data","dir":"Articles","previous_headings":"Input","what":"Custom data","title":"Inputs and Outputs","text":"Using existing count matrices annotations already covered “Getting started” vignette; section explain minor details. generating dataset data, need provide count_matrix parameter dataset(); additionally can provide TPM matrix tpm_matrix. lead two simulations, one based counts one based TPMs. either , genes located rows, cells columns. Additionally, annotation table needed, cell-type annotations. needs consist least 2 columns: ID cell_type, ID identical column names provides matrix/matrices. cells appear annotation matrix, intersection used generate dataset. example data:","code":"counts <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm)) colnames(counts) <- paste0(\"cell-\", rep(1:300)) colnames(tpm) <- paste0(\"cell-\", rep(1:300)) rownames(counts) <- paste0(\"gene-\", rep(1:1000)) rownames(tpm) <- paste0(\"gene-\", rep(1:1000)) annotation <- data.frame(   \"ID\" = paste0(\"cell-\", rep(1:300)),   \"cell_type\" = c(     rep(\"T cells CD4\", 50),     rep(\"T cells CD8\", 50),     rep(\"Macrophages\", 100),     rep(\"NK cells\", 10),     rep(\"B cells\", 70),     rep(\"Monocytes\", 20)   ),   row.names = paste0(\"cell-\", rep(1:300)) ) seurat_obj <- Seurat::CreateSeuratObject(counts = counts, assay = \"counts\", meta.data = annotation) tpm_assay <- Seurat::CreateAssayObject(counts = tpm) seurat_obj[[\"tpm\"]] <- tpm_assay seurat_obj #> An object of class Seurat  #> 2000 features across 300 samples within 2 assays  #> Active assay: counts (1000 features, 0 variable features) #>  1 other assay present: tpm"},{"path":"https://omnideconv.org/SimBu/articles/simulator_input_output.html","id":"seurat","dir":"Articles","previous_headings":"Input > Custom data","what":"Seurat","title":"Inputs and Outputs","text":"possible use Seurat object build dataset; give name assay containing count data counts slot, name column meta table unique cell IDs name column meta table cell type identifier. Additionally may give name assay containing TPM data counts slot.","code":"ds_seurat <- SimBu::dataset_seurat(   seurat_obj = seurat_obj,   count_assay = \"counts\",   cell_id_col = \"ID\",   cell_type_col = \"cell_type\",   tpm_assay = \"tpm\",   name = \"seurat_dataset\" ) #> Filtering genes... #> Created dataset."},{"path":"https://omnideconv.org/SimBu/articles/simulator_input_output.html","id":"h5ad-files","dir":"Articles","previous_headings":"Input > Custom data","what":"h5ad files","title":"Inputs and Outputs","text":"possible use h5ad file directly, file format stores AnnData objects. h5ad files can store cell specific information obs layer, additional annotation input SimBu needed. Note: want counts tpm data input, provide two files; cell annotation match two files. SimBu expects cells columns genes/features rows input matrix, necessarily case anndata objects https://falexwolf.de/img/scanpy/anndata.svg, SimBu can handle h5ad files cells obs var layer. cells obs, use cells_in_obs=TRUE FALSE otherwise. also automatically transpose matrix. know, columns cell annotation layer correspond cell identifiers cell type labels, use cell_id_col cell_type_col parameters, respectively. function uses SimBu python environment read h5ad files extract data, may take time initialize conda environment first usage .","code":"# example h5ad file, where cell type info is stored in `obs` layer #h5 <- system.file(\"extdata\", \"anndata.h5ad\", package = \"SimBu\") #ds_h5ad <- SimBu::dataset_h5ad( #  h5ad_file_counts = h5, #  name = \"h5ad_dataset\", #  cell_id_col = 0, # this will use the rownames of the metadata as cell identifiers #  cell_type_col = \"group\", # this will use the 'group' column of the metadata as cell type info #  cells_in_obs = TRUE # in case your cell information is stored in the var layer, switch to FALSE #)"},{"path":"https://omnideconv.org/SimBu/articles/simulator_input_output.html","id":"merging-datasets","dir":"Articles","previous_headings":"Input","what":"Merging datasets","title":"Inputs and Outputs","text":"able merge multiple datasets using dataset_merge function:","code":"ds <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   tpm_matrix = tpm,   name = \"test_dataset\" ) #> Filtering genes... #> Created dataset. ds_multiple <- SimBu::dataset_merge(   dataset_list = list(ds_seurat, ds),   name = \"ds_multiple\" ) #> Filtering genes... #> Created dataset."},{"path":"https://omnideconv.org/SimBu/articles/simulator_input_output.html","id":"output","dir":"Articles","previous_headings":"","what":"Output","title":"Inputs and Outputs","text":"simulation object contains three named entries: bulk: SummarizedExperiment object pseudo-bulk dataset(s) stored assays. can accessed like : count matrix given dataset initially, bulk_counts assay filled. cell_fractions: table rows represent simulated samples columns represent different simulated cell-types. entries table store specific cell-type fraction per sample. scaling_vector: named list, used scaling value cell single cell dataset.","code":"simulation <- SimBu::simulate_bulk(   data = ds_multiple,   scenario = \"random\",   scaling_factor = \"NONE\",   nsamples = 10, ncells = 100 ) #> Finished simulation. dim(SummarizedExperiment::assays(simulation$bulk)[[\"bulk_counts\"]]) #> [1] 1000   10 dim(SummarizedExperiment::assays(simulation$bulk)[[\"bulk_tpm\"]]) #> [1] 1000   10 sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] SimBu_1.1.3        curl_5.0.0         SeuratObject_4.1.3 Seurat_4.3.0       #>  #> loaded via a namespace (and not attached): #>   [1] systemfonts_1.0.4           plyr_1.8.8                  #>   [3] igraph_1.3.5                lazyeval_0.2.2              #>   [5] sp_1.6-0                    proxyC_0.3.3                #>   [7] splines_4.2.2               BiocParallel_1.32.5         #>   [9] listenv_0.9.0               scattermore_0.8             #>  [11] GenomeInfoDb_1.34.7         ggplot2_3.4.0               #>  [13] digest_0.6.31               htmltools_0.5.4             #>  [15] fansi_1.0.4                 magrittr_2.0.3              #>  [17] memoise_2.0.1               tensor_1.5                  #>  [19] cluster_2.1.4               ROCR_1.0-11                 #>  [21] globals_0.16.2              RcppParallel_5.1.6          #>  [23] matrixStats_0.63.0          pkgdown_2.0.7               #>  [25] spatstat.sparse_3.0-0       colorspace_2.1-0            #>  [27] ggrepel_0.9.2               textshaping_0.3.6           #>  [29] xfun_0.36                   dplyr_1.1.0                 #>  [31] RCurl_1.98-1.10             jsonlite_1.8.4              #>  [33] progressr_0.13.0            spatstat.data_3.0-0         #>  [35] survival_3.4-0              zoo_1.8-11                  #>  [37] glue_1.6.2                  polyclip_1.10-4             #>  [39] gtable_0.3.1                zlibbioc_1.44.0             #>  [41] XVector_0.38.0              leiden_0.4.3                #>  [43] DelayedArray_0.24.0         future.apply_1.10.0         #>  [45] BiocGenerics_0.44.0         abind_1.4-5                 #>  [47] scales_1.2.1                spatstat.random_3.1-3       #>  [49] miniUI_0.1.1.1              Rcpp_1.0.10                 #>  [51] viridisLite_0.4.1           xtable_1.8-4                #>  [53] reticulate_1.28             stats4_4.2.2                #>  [55] htmlwidgets_1.6.1           httr_1.4.4                  #>  [57] RColorBrewer_1.1-3          ellipsis_0.3.2              #>  [59] ica_1.0-3                   pkgconfig_2.0.3             #>  [61] sass_0.4.5                  uwot_0.1.14                 #>  [63] deldir_1.0-6                utf8_1.2.2                  #>  [65] tidyselect_1.2.0            rlang_1.0.6                 #>  [67] reshape2_1.4.4              later_1.3.0                 #>  [69] munsell_0.5.0               tools_4.2.2                 #>  [71] cachem_1.0.6                cli_3.6.0                   #>  [73] generics_0.1.3              ggridges_0.5.4              #>  [75] evaluate_0.20               stringr_1.5.0               #>  [77] fastmap_1.1.0               yaml_2.3.7                  #>  [79] ragg_1.2.5                  goftest_1.2-3               #>  [81] knitr_1.42                  fs_1.6.0                    #>  [83] fitdistrplus_1.1-8          purrr_1.0.1                 #>  [85] RANN_2.6.1                  pbapply_1.7-0               #>  [87] future_1.30.0               nlme_3.1-160                #>  [89] sparseMatrixStats_1.10.0    mime_0.12                   #>  [91] compiler_4.2.2              plotly_4.10.1               #>  [93] png_0.1-8                   spatstat.utils_3.0-1        #>  [95] tibble_3.1.8                bslib_0.4.2                 #>  [97] stringi_1.7.12              desc_1.4.2                  #>  [99] lattice_0.20-45             Matrix_1.5-1                #> [101] vctrs_0.5.2                 pillar_1.8.1                #> [103] lifecycle_1.0.3             spatstat.geom_3.0-6         #> [105] lmtest_0.9-40               jquerylib_0.1.4             #> [107] RcppAnnoy_0.0.20            data.table_1.14.6           #> [109] cowplot_1.1.1               bitops_1.0-7                #> [111] irlba_2.3.5.1               GenomicRanges_1.50.2        #> [113] httpuv_1.6.8                patchwork_1.1.2             #> [115] R6_2.5.1                    promises_1.2.0.1            #> [117] KernSmooth_2.23-20          gridExtra_2.3               #> [119] IRanges_2.32.0              parallelly_1.34.0           #> [121] codetools_0.2-18            MASS_7.3-58.1               #> [123] SummarizedExperiment_1.28.0 rprojroot_2.0.3             #> [125] withr_2.5.0                 sctransform_0.3.5           #> [127] S4Vectors_0.36.1            GenomeInfoDbData_1.2.9      #> [129] parallel_4.2.2              grid_4.2.2                  #> [131] tidyr_1.3.0                 rmarkdown_2.20              #> [133] MatrixGenerics_1.10.0       Rtsne_0.16                  #> [135] spatstat.explore_3.0-6      Biobase_2.58.0              #> [137] shiny_1.7.4"},{"path":"https://omnideconv.org/SimBu/articles/simulator_scaling_factors.html","id":"using-scaling-factors","dir":"Articles","previous_headings":"","what":"Using scaling factors","title":"Introducing mRNA bias into simulations with scaling factors","text":"package allows user introduce mRNA bias pseudo-bulk RNA-seq samples. Different cell-types contain different amounts mRNA (Dendritic cells examples contain much Neutrophils); bias can added simulations artificially different ways. scaling factors always applied single-cell dataset first, altering expression profiles accordingly, pseudo-bulk samples generated summing count data sampled cells.","code":"# Example data counts <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm)) colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000)) annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(rep(\"T cells CD4\", 150), rep(\"T cells CD8\", 150)),   \"spikes\" = runif(300),   \"add_1\" = runif(300),   \"add_2\" = runif(300) ) ds <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   name = \"test_dataset\" ) #> Filtering genes... #> Created dataset."},{"path":"https://omnideconv.org/SimBu/articles/simulator_scaling_factors.html","id":"pre-defined-scaling-factors","dir":"Articles","previous_headings":"Using scaling factors","what":"Pre-defined scaling factors","title":"Introducing mRNA bias into simulations with scaling factors","text":"studies proposed scaling factors immune cells, EPIC (Racle et al. 2017) quanTIseq (Finotello et al. 2019), deconvolution tools correct mRNA bias internally using values: want apply one scaling factors simulation (therefore -/decreasing expression signals cell-types), can use scaling_factor parameter. Note, pre-defined scaling factors offer values certain number cell types, annotation provided dataset match names 1:1. cell types dataset present scaling factor remain unscaled warning message appear. can also try custom scaling factors, example increasing expression levels single cell-type (T cells CD8) 10-fold compared rest. cell-types mentioned named list given custom_scaling_vector transformed scaling factor 1, meaning nothing changes . Important: Watch cell-type annotation names dataset scaling factor! Otherwise scaling factor applied even worse, applied different cell-type.","code":"epic <- data.frame(   type = c(     \"B cells\",     \"Macrophages\",     \"Monocytes\",     \"Neutrophils\",     \"NK cells\",     \"T cells\",     \"T cells CD4\",     \"T cells CD8\",     \"T helper cells\",     \"T regulatory cells\",     \"otherCells\",     \"default\"   ),   mRNA = c(     0.4016,     1.4196,     1.4196,     0.1300,     0.4396,     0.3952,     0.3952,     0.3952,     0.3952,     0.3952,     0.4000,     0.4000   ) ) epic #>                  type   mRNA #> 1             B cells 0.4016 #> 2         Macrophages 1.4196 #> 3           Monocytes 1.4196 #> 4         Neutrophils 0.1300 #> 5            NK cells 0.4396 #> 6             T cells 0.3952 #> 7         T cells CD4 0.3952 #> 8         T cells CD8 0.3952 #> 9      T helper cells 0.3952 #> 10 T regulatory cells 0.3952 #> 11         otherCells 0.4000 #> 12            default 0.4000 quantiseq <- data.frame(   type = c(     \"B cells\",     \"Macrophages\",     \"MacrophagesM2\",     \"Monocytes\",     \"Neutrophils\",     \"NK cells\",     \"T cells CD4\",     \"T cells CD8\",     \"T regulatory cells\",     \"Dendritic cells\",     \"T cells\"   ),   mRNA = c(     65.66148,     138.11520,     119.35447,     130.65455,     27.73634,     117.71584,     63.87200,     70.25659,     72.55110,     140.76091,     68.89323   ) ) quantiseq #>                  type      mRNA #> 1             B cells  65.66148 #> 2         Macrophages 138.11520 #> 3       MacrophagesM2 119.35447 #> 4           Monocytes 130.65455 #> 5         Neutrophils  27.73634 #> 6            NK cells 117.71584 #> 7         T cells CD4  63.87200 #> 8         T cells CD8  70.25659 #> 9  T regulatory cells  72.55110 #> 10    Dendritic cells 140.76091 #> 11            T cells  68.89323 sim_epic <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"epic\",   nsamples = 10,   ncells = 100,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE ) #> Using parallel generation of simulations. #> Using EPIC scaling factors. #> Finished simulation. sim_extreme_b <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"custom\",   custom_scaling_vector = c(\"T cells CD8\" = 10),   nsamples = 10,   ncells = 100,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE ) #> Using parallel generation of simulations. #> Using custom scaling factors. #> Warning in merge_scaling_factor(data = data, scaling_factor_values = #> custom_scaling_vector, : For some cell type(s) in the dataset, no scaling #> factor is available when using custom: T cells CD4. This cell type will not be #> re-scaled. #> Finished simulation."},{"path":"https://omnideconv.org/SimBu/articles/simulator_scaling_factors.html","id":"dataset-specific-scaling-factors","dir":"Articles","previous_headings":"Using scaling factors","what":"Dataset specific scaling factors","title":"Introducing mRNA bias into simulations with scaling factors","text":"can also choose calculate scaling factors, depending provided single-cell dataset. Compared previous section, give unique value cell rather cell-type, making possibly sensitive.","code":""},{"path":"https://omnideconv.org/SimBu/articles/simulator_scaling_factors.html","id":"reads-and-genes","dir":"Articles","previous_headings":"Using scaling factors > Dataset specific scaling factors","what":"Reads and genes","title":"Introducing mRNA bias into simulations with scaling factors","text":"Two straight forward approaches number reads number expressed genes/features. values easily obtainable provided count data, SimBu already calculates dataset generation. options also allow use numerical measurements single cells scaling factors, weight size example. Lets pretend, add_1 add_2 measurements. additional_cols parameter, can added SimBu dataset can use scaling factor well:","code":"sim_reads <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"read_number\", # use number of reads as scaling factor   nsamples = 10,   ncells = 100,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE ) #> Using parallel generation of simulations. #> Finished simulation. sim_genes <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"expressed_genes\", # use number of expressed genes column as scaling factor   nsamples = 10,   ncells = 100,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE ) #> Using parallel generation of simulations. #> Finished simulation. head(annotation) #>       ID   cell_type    spikes     add_1      add_2 #> 1 cell_1 T cells CD4 0.8868611 0.7193247 0.76336066 #> 2 cell_2 T cells CD4 0.6711769 0.9906033 0.94837717 #> 3 cell_3 T cells CD4 0.5990885 0.9815746 0.88988267 #> 4 cell_4 T cells CD4 0.5635159 0.4046006 0.07318759 #> 5 cell_5 T cells CD4 0.1021795 0.2172213 0.30944567 #> 6 cell_6 T cells CD4 0.5013826 0.1530086 0.01586149 ds <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   name = \"test_dataset\",   additional_cols = c(\"add_1\", \"add_2\") ) # add columns to dataset #> Filtering genes... #> Created dataset. sim_genes <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"add_1\", # use add_1 column as scaling factor   nsamples = 10,   ncells = 100,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE ) #> Using parallel generation of simulations. #> Scaling by custom column in annotation table; if no scaling is wished instead, use 'NONE'. #> Finished simulation."},{"path":"https://omnideconv.org/SimBu/articles/simulator_scaling_factors.html","id":"spike-ins","dir":"Articles","previous_headings":"Using scaling factors > Dataset specific scaling factors","what":"Spike-ins","title":"Introducing mRNA bias into simulations with scaling factors","text":"One numerical measurement can spike-ins. Usually number reads mapped spike-molecules per cell given cell annotations. case, can stored dataset annotation using spike_in_col parameter, indicate name column annotation dataframe spike-information stored. calculate scaling factor , number reads also necessary, add information well (using read_number_col parameter). scaling factor spike-ins calculated “% reads mapped spike-reads”, : (n_reads - n_spike_in)/n_reads cell. apply like :","code":"ds <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   name = \"test_dataset\",   spike_in_col = \"spikes\" ) # give the name in the annotation file, that contains spike-in information sim_spike <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"spike_in\", # use spike-in scaling factor   nsamples = 10,   ncells = 100,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE )"},{"path":"https://omnideconv.org/SimBu/articles/simulator_scaling_factors.html","id":"census---estimate-mrna-counts-per-cell","dir":"Articles","previous_headings":"Using scaling factors","what":"Census - estimate mRNA counts per cell","title":"Introducing mRNA bias into simulations with scaling factors","text":"Census approach tries convert TPM counts relative transcript counts. basically means, get mRNA counts per cell, can differ cell-types.(Qiu et al. 2017) state paper, applied TPM/FPKM normalized data, tried raw expression counts well, worked well. Census calculates vector scaling value cell sample. can switch feature , setting scaling_factor parameter census. analysis found, Census basically complicated way estimating number expressed genes per cell. remain user decide /wants use census simply number expressed genes (shown ) scaling factor.","code":"ds <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   tpm_matrix = tpm,   name = \"test_dataset\" ) #> Filtering genes... #> Created dataset. sim_census <- SimBu::simulate_bulk(   data = ds,   scenario = \"random\",   scaling_factor = \"census\", # use census scaling factor   nsamples = 10,   ncells = 100,   BPPARAM = BiocParallel::MulticoreParam(workers = 4),   run_parallel = TRUE ) #> Using parallel generation of simulations. #> Finished simulation. sessionInfo() #> R version 4.2.2 (2022-10-31) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 22.04.1 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] SummarizedExperiment_1.28.0 SimBu_1.1.3                 #>  [3] xfun_0.36                   bslib_0.4.2                 #>  [5] purrr_1.0.1                 lattice_0.20-45             #>  [7] vctrs_0.5.2                 htmltools_0.5.4             #>  [9] stats4_4.2.2                yaml_2.3.7                  #> [11] rlang_1.0.6                 pkgdown_2.0.7               #> [13] jquerylib_0.1.4             glue_1.6.2                  #> [15] BiocParallel_1.32.5         BiocGenerics_0.44.0         #> [17] matrixStats_0.63.0          GenomeInfoDbData_1.2.9      #> [19] lifecycle_1.0.3             stringr_1.5.0               #> [21] MatrixGenerics_1.10.0       zlibbioc_1.44.0             #> [23] ragg_1.2.5                  proxyC_0.3.3                #> [25] codetools_0.2-18            memoise_2.0.1               #> [27] evaluate_0.20               Biobase_2.58.0              #> [29] knitr_1.42                  IRanges_2.32.0              #> [31] fastmap_1.1.0               GenomeInfoDb_1.34.7         #> [33] parallel_4.2.2              Rcpp_1.0.10                 #> [35] cachem_1.0.6                DelayedArray_0.24.0         #> [37] desc_1.4.2                  S4Vectors_0.36.1            #> [39] RcppParallel_5.1.6          jsonlite_1.8.4              #> [41] XVector_0.38.0              systemfonts_1.0.4           #> [43] fs_1.6.0                    textshaping_0.3.6           #> [45] digest_0.6.31               stringi_1.7.12              #> [47] GenomicRanges_1.50.2        grid_4.2.2                  #> [49] rprojroot_2.0.3             cli_3.6.0                   #> [51] tools_4.2.2                 bitops_1.0-7                #> [53] magrittr_2.0.3              sass_0.4.5                  #> [55] RCurl_1.98-1.10             Matrix_1.5-1                #> [57] sparseMatrixStats_1.10.0    rmarkdown_2.20              #> [59] R6_2.5.1                    compiler_4.2.2"},{"path":[]},{"path":"https://omnideconv.org/SimBu/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Dietrich. Author, maintainer.","code":""},{"path":"https://omnideconv.org/SimBu/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dietrich (2023). SimBu: Simulate Bulk RNA-seq Datasets Single-Cell Datasets. R package version 1.1.3, https://github.com/omnideconv/SimBu.","code":"@Manual{,   title = {SimBu: Simulate Bulk RNA-seq Datasets from Single-Cell Datasets},   author = {Alexander Dietrich},   year = {2023},   note = {R package version 1.1.3},   url = {https://github.com/omnideconv/SimBu}, }"},{"path":"https://omnideconv.org/SimBu/index.html","id":"simbu","dir":"","previous_headings":"","what":"Simulate Bulk RNA-seq Datasets from Single-Cell Datasets","title":"Simulate Bulk RNA-seq Datasets from Single-Cell Datasets","text":"goal SimBu simulate pseudo-bulk RNAseq datasets variable cell-type fractions baed public private single-cell RNAseq datasets.","code":""},{"path":"https://omnideconv.org/SimBu/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate Bulk RNA-seq Datasets from Single-Cell Datasets","text":"install developmental version package, run: install Bioconductor:","code":"install.packages(\"devtools\") devtools::install_github(\"omnideconv/SimBu\") if (!require(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") }  BiocManager::install(\"SimBu\")"},{"path":"https://omnideconv.org/SimBu/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulate Bulk RNA-seq Datasets from Single-Cell Datasets","text":"Create dataset-object local data simulate pseudo-bulk dataset detailed usage instructions, check Getting started. can find information simulation setup mRNA bias SimBu publication.","code":"library(SimBu) # use local data to build dataset dataset <- dataset(annotation = annotation_dataframe, count_matrix = expression_matrix, name = \"test_dataset\") simulation <- simulate_bulk(data = dataset, scenario = \"random\", scaling_factor = \"NONE\")"},{"path":"https://omnideconv.org/SimBu/reference/SimBu.html","id":null,"dir":"Reference","previous_headings":"","what":"SimBu: Bias-aware simulation of bulk RNA-seq data with variable cell type composition — SimBu","title":"SimBu: Bias-aware simulation of bulk RNA-seq data with variable cell type composition — SimBu","text":"complex tissues typically composed various cell types, deconvolution tools developed computationally infer cellular composition bulk RNA sequencing (RNA-seq) data. comprehensively assess deconvolution performance, gold-standard datasets indispensable. simulation ‘pseudo-bulk’ data, generated aggregating single-cell RNA-seq (scRNA-seq) expression profiles pre-defined proportions, offers scalable cost-effective way generating gold-standard datasets. SimBu developed simulate pseudo-bulk samples based various simulation scenarios, designed test specific features deconvolution methods. unique feature SimBu modelling cell-type-specific mRNA bias using experimentally-derived data-driven scaling factors.","code":""},{"path":"https://omnideconv.org/SimBu/reference/SimBu.html","id":"dataset-generation","dir":"Reference","previous_headings":"","what":"Dataset generation","title":"SimBu: Bias-aware simulation of bulk RNA-seq data with variable cell type composition — SimBu","text":"need annotated scRNA-seq dataset (matrix file, h5ad file, Seurat object), baseline simulations. Use dataset_* functions generate SummarizedExperiment, holds important information. also possible access scRNA-seq datasets public database Sfaira, using functions dataset_sfaira() dataset_sfaira_multiple().","code":""},{"path":"https://omnideconv.org/SimBu/reference/SimBu.html","id":"simulation","dir":"Reference","previous_headings":"","what":"Simulation","title":"SimBu: Bias-aware simulation of bulk RNA-seq data with variable cell type composition — SimBu","text":"Use simulate_bulk() function generate multiple pseudo-bulk samples, returned SummarizedExperiment. can adapt cell type fractions sample changing scenario parameter.","code":""},{"path":"https://omnideconv.org/SimBu/reference/SimBu.html","id":"visulaization","dir":"Reference","previous_headings":"","what":"Visulaization","title":"SimBu: Bias-aware simulation of bulk RNA-seq data with variable cell type composition — SimBu","text":"Inspect cell type composition simulations plot_simulation() function.","code":""},{"path":"https://omnideconv.org/SimBu/reference/calc_scaling_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate scaling factor for a dataset — calc_scaling_vector","title":"Calculate scaling factor for a dataset — calc_scaling_vector","text":"scaling factor default matrix try use (counts TPM). required matrix available, one used warning given.","code":""},{"path":"https://omnideconv.org/SimBu/reference/calc_scaling_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate scaling factor for a dataset — calc_scaling_vector","text":"","code":"calc_scaling_vector(   data,   scaling_factor,   custom_scaling_vector,   scaling_factor_single_cell,   BPPARAM,   run_parallel )"},{"path":"https://omnideconv.org/SimBu/reference/calc_scaling_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate scaling factor for a dataset — calc_scaling_vector","text":"data dataset object scaling_factor name scaling factor; possible : census, spike_in, read_number, custom NONE scaling factor custom_scaling_vector named vector custom scaling values cell-types. Cell-types occur vector present dataset set 1 scaling_factor_single_cell boolean: decide scaling value single cell calculated (default) median scaling values cell type calculated BPPARAM BiocParallel::bpparam() default; specific number threads x want used, insert: BiocParallel::MulticoreParam(workers = x) run_parallel boolean, decide multi-threaded calculation run. FALSE default","code":""},{"path":"https://omnideconv.org/SimBu/reference/calc_scaling_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate scaling factor for a dataset — calc_scaling_vector","text":"named vector scaling value cell dataset","code":""},{"path":"https://omnideconv.org/SimBu/reference/census.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies the Census count transformation on a count matrix — census","title":"Applies the Census count transformation on a count matrix — census","text":"needs sparse matrix cells columns genes rows. can find detailed explaination : http://cole-trapnell-lab.github.io/monocle-release/docs/#census","code":""},{"path":"https://omnideconv.org/SimBu/reference/census.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies the Census count transformation on a count matrix — census","text":"","code":"census(   matrix,   exp_capture_rate = 0.25,   expr_threshold = 0,   BPPARAM = BiocParallel::bpparam(),   run_parallel = FALSE )"},{"path":"https://omnideconv.org/SimBu/reference/census.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies the Census count transformation on a count matrix — census","text":"matrix sparse count matrix; cells columns, genes rows exp_capture_rate expected capture rate; default=0.25 expr_threshold expression threshold; default=0 BPPARAM BiocParallel::bpparam() default; specific number threads x want used, insert: BiocParallel::MulticoreParam(workers = x) run_parallel boolean, decide multi-threaded calculation run. FALSE default","code":""},{"path":"https://omnideconv.org/SimBu/reference/census.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies the Census count transformation on a count matrix — census","text":"vector cell-type, scaling factor can used transform counts matrix","code":""},{"path":"https://omnideconv.org/SimBu/reference/census.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies the Census count transformation on a count matrix — census","text":"","code":"tpm <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm)) cen <- SimBu::census(tpm)"},{"path":"https://omnideconv.org/SimBu/reference/census_monocle.html","id":null,"dir":"Reference","previous_headings":"","what":"Census calculation as implemented in monocle — census_monocle","title":"Census calculation as implemented in monocle — census_monocle","text":"Implementation taken Monocle2: https://github.com/cole-trapnell-lab/monocle-release/blob/master/R/normalization.R#L140","code":""},{"path":"https://omnideconv.org/SimBu/reference/census_monocle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Census calculation as implemented in monocle — census_monocle","text":"","code":"census_monocle(expr_matrix, exp_capture_rate, expr_threshold)"},{"path":"https://omnideconv.org/SimBu/reference/census_monocle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Census calculation as implemented in monocle — census_monocle","text":"expr_matrix TPM matrix exp_capture_rate expected capture rate; default=0.25 expr_threshold expression threshold; default=0","code":""},{"path":"https://omnideconv.org/SimBu/reference/census_monocle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Census calculation as implemented in monocle — census_monocle","text":"vector estimated mRNA values per cell expr_matrix","code":""},{"path":"https://omnideconv.org/SimBu/reference/check_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"check for correct column names in annotation file and replace them if necessary — check_annotation","title":"check for correct column names in annotation file and replace them if necessary — check_annotation","text":"check correct column names annotation file replace necessary","code":""},{"path":"https://omnideconv.org/SimBu/reference/check_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check for correct column names in annotation file and replace them if necessary — check_annotation","text":"","code":"check_annotation(annotation, cell_column = \"cell_type\", id_column = 1)"},{"path":"https://omnideconv.org/SimBu/reference/check_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check for correct column names in annotation file and replace them if necessary — check_annotation","text":"annotation dataframe; annotation dataframe cell_column name cell-type column; default \"cell_type\" id_column name cell ID column; default 1, uses rownames","code":""},{"path":"https://omnideconv.org/SimBu/reference/check_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check for correct column names in annotation file and replace them if necessary — check_annotation","text":"annotation dataframe correct column names","code":""},{"path":"https://omnideconv.org/SimBu/reference/check_if_tpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks, if a matrix is TPM-like (columns sum up to 1e6) — check_if_tpm","title":"Checks, if a matrix is TPM-like (columns sum up to 1e6) — check_if_tpm","text":"Checks, matrix TPM-like (columns sum 1e6)","code":""},{"path":"https://omnideconv.org/SimBu/reference/check_if_tpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks, if a matrix is TPM-like (columns sum up to 1e6) — check_if_tpm","text":"","code":"check_if_tpm(tpm_matrix, lower_limit = 7e+05)"},{"path":"https://omnideconv.org/SimBu/reference/check_if_tpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks, if a matrix is TPM-like (columns sum up to 1e6) — check_if_tpm","text":"tpm_matrix matrix check lower_limit lowest sum value, cell may ","code":""},{"path":"https://omnideconv.org/SimBu/reference/check_if_tpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks, if a matrix is TPM-like (columns sum up to 1e6) — check_if_tpm","text":"boolean","code":""},{"path":"https://omnideconv.org/SimBu/reference/compare_matrix_with_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if annotation and matrix have same cells — compare_matrix_with_annotation","title":"Check if annotation and matrix have same cells — compare_matrix_with_annotation","text":"Otherwise intersection used","code":""},{"path":"https://omnideconv.org/SimBu/reference/compare_matrix_with_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if annotation and matrix have same cells — compare_matrix_with_annotation","text":"","code":"compare_matrix_with_annotation(m, annotation)"},{"path":"https://omnideconv.org/SimBu/reference/compare_matrix_with_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if annotation and matrix have same cells — compare_matrix_with_annotation","text":"m matrix, column names cells annotation data.frame, rownames genes, cell names ID column","code":""},{"path":"https://omnideconv.org/SimBu/reference/compare_matrix_with_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if annotation and matrix have same cells — compare_matrix_with_annotation","text":"intersected matrix","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SummarizedExperiment using local annotation and count matrix R objects — dataset","title":"Build SummarizedExperiment using local annotation and count matrix R objects — dataset","text":"Build SummarizedExperiment using local annotation count matrix R objects","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SummarizedExperiment using local annotation and count matrix R objects — dataset","text":"","code":"dataset(   annotation,   count_matrix = NULL,   tpm_matrix = NULL,   name = \"SimBu_dataset\",   spike_in_col = NULL,   additional_cols = NULL,   filter_genes = TRUE,   variance_cutoff = 0,   type_abundance_cutoff = 0,   scale_tpm = TRUE )"},{"path":"https://omnideconv.org/SimBu/reference/dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SummarizedExperiment using local annotation and count matrix R objects — dataset","text":"annotation (mandatory) dataframe; needs columns 'ID' 'cell_type'; 'ID' needs equal cell_names count_matrix count_matrix (mandatory) sparse count matrix; raw count data expected genes rows, cells columns tpm_matrix sparse count matrix; TPM like count data expected genes rows, cells columns name name dataset; used new unique IDs cells spike_in_col column annotation contains information spike_in counts, can used re-scale counts; mandatory spike_in scaling factor simulation additional_cols list column names annotation, stored well dataset object filter_genes boolean, TRUE, removes genes 0 expression samples & genes variance variance_cutoff variance_cutoff numeric, applied filter_genes TRUE: removes genes variance chosen cutoff (default = 0) type_abundance_cutoff numeric, remove cells, whose cell-type appears less given value. removes low abundant cell-types scale_tpm boolean, TRUE (default) cells tpm_matrix scaled sum 1e6","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SummarizedExperiment using local annotation and count matrix R objects — dataset","text":"Return SummarizedExperiment object","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build SummarizedExperiment using local annotation and count matrix R objects — dataset","text":"","code":"counts <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm))  colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000))  annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(rep(\"T cells CD4\", 300)) )  ds <- SimBu::dataset(annotation = annotation, count_matrix = counts, tpm_matrix = tpm, name = \"test_dataset\")"},{"path":"https://omnideconv.org/SimBu/reference/dataset_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SummarizedExperiment using a h5ad file for the counts — dataset_h5ad","title":"Build SummarizedExperiment using a h5ad file for the counts — dataset_h5ad","text":"Build SummarizedExperiment using h5ad file counts","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SummarizedExperiment using a h5ad file for the counts — dataset_h5ad","text":"","code":"dataset_h5ad(   h5ad_file_counts,   h5ad_file_tpm = NULL,   cell_id_col = \"ID\",   cell_type_col = \"cell_type\",   cells_in_obs = TRUE,   name = \"SimBu_dataset\",   spike_in_col = NULL,   additional_cols = NULL,   filter_genes = TRUE,   variance_cutoff = 0,   type_abundance_cutoff = 0,   scale_tpm = TRUE )"},{"path":"https://omnideconv.org/SimBu/reference/dataset_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SummarizedExperiment using a h5ad file for the counts — dataset_h5ad","text":"h5ad_file_counts (mandatory) h5ad file raw count data h5ad_file_tpm h5ad file TPM count data cell_id_col (mandatory) name column Seurat meta.data unique cell ids; 0 rownames cell_type_col (mandatory) name column Seurat meta.data cell type name cells_in_obs boolean, TRUE, cell identifiers taken obs layer anndata object; FALSE, taken var name name dataset; used new unique IDs cells#' @param spike_in_col column annotation contains information spike_in counts, can used re-scale counts; mandatory spike_in scaling factor simulation spike_in_col column annotation contains information spike_in counts, can used re-scale counts; mandatory spike_in scaling factor simulation additional_cols list column names annotation, stored well dataset object filter_genes boolean, TRUE, removes genes 0 expression samples & genes variance variance_cutoff variance_cutoff numeric, applied filter_genes TRUE: removes genes variance chosen cutoff type_abundance_cutoff numeric, remove cells, whose cell-type appears less given value. removes low abundant cell-types scale_tpm boolean, TRUE (default) cells tpm_matrix scaled sum 1e6","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_h5ad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SummarizedExperiment using a h5ad file for the counts — dataset_h5ad","text":"Return SummarizedExperiment object","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_h5ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build SummarizedExperiment using a h5ad file for the counts — dataset_h5ad","text":"","code":"h5 <- system.file(\"extdata\", \"anndata.h5ad\", package = \"SimBu\") ds_h5ad <- SimBu::dataset_h5ad(   h5ad_file_counts = h5,   name = \"h5ad_dataset\",   cell_id_col = \"id\", # this will use the 'id' column of the metadata as cell identifiers   cell_type_col = \"group\", # this will use the 'group' column of the metadata as cell type info   cells_in_obs = TRUE ) # in case your cell information is stored in the var layer, switch to FALSE"},{"path":"https://omnideconv.org/SimBu/reference/dataset_merge.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge multiple SummarizedExperiment datasets into one — dataset_merge","title":"Merge multiple SummarizedExperiment datasets into one — dataset_merge","text":"objects need number assays order work.","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_merge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge multiple SummarizedExperiment datasets into one — dataset_merge","text":"","code":"dataset_merge(   dataset_list,   name = \"SimBu_dataset\",   spike_in_col = NULL,   additional_cols = NULL,   filter_genes = TRUE,   variance_cutoff = 0,   type_abundance_cutoff = 0,   scale_tpm = TRUE )"},{"path":"https://omnideconv.org/SimBu/reference/dataset_merge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge multiple SummarizedExperiment datasets into one — dataset_merge","text":"dataset_list (mandatory) list SummarizedExperiment objects name name new dataset spike_in_col column annotation contains information spike_in counts, can used re-scale counts; mandatory spike_in scaling factor simulation additional_cols list column names annotation, stored well dataset object filter_genes boolean, TRUE, removes genes 0 expression samples & genes variance variance_cutoff variance_cutoff numeric, applied filter_genes TRUE: removes genes variance chosen cutoff type_abundance_cutoff numeric, remove cells, whose cell-type appears less given value. removes low abundant cell-types scale_tpm boolean, TRUE (default) cells tpm_matrix scaled sum 1e6","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_merge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge multiple SummarizedExperiment datasets into one — dataset_merge","text":"SummarizedExperiment object","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_merge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge multiple SummarizedExperiment datasets into one — dataset_merge","text":"","code":"counts <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm))  colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000))  annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(rep(\"T cells CD4\", 300)) )  ds1 <- SimBu::dataset(annotation = annotation, count_matrix = counts, tpm_matrix = tpm, name = \"test_dataset1\") ds2 <- SimBu::dataset(annotation = annotation, count_matrix = counts, tpm_matrix = tpm, name = \"test_dataset2\") ds_merged <- SimBu::dataset_merge(list(ds1, ds2))"},{"path":"https://omnideconv.org/SimBu/reference/dataset_seurat.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SummarizedExperiment using a Seurat object — dataset_seurat","title":"Build SummarizedExperiment using a Seurat object — dataset_seurat","text":"Build SummarizedExperiment using Seurat object","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_seurat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SummarizedExperiment using a Seurat object — dataset_seurat","text":"","code":"dataset_seurat(   seurat_obj,   count_assay,   cell_id_col,   cell_type_col,   tpm_assay = NULL,   name = \"SimBu_dataset\",   spike_in_col = NULL,   additional_cols = NULL,   filter_genes = TRUE,   variance_cutoff = 0,   type_abundance_cutoff = 0,   scale_tpm = TRUE )"},{"path":"https://omnideconv.org/SimBu/reference/dataset_seurat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SummarizedExperiment using a Seurat object — dataset_seurat","text":"seurat_obj (mandatory) Seurat object TPM counts count_assay (mandatory) name assay Seurat object contains count data 'counts' slot cell_id_col (mandatory) name column Seurat meta.data unique cell ids cell_type_col (mandatory) name column Seurat meta.data cell type name tpm_assay name assay Seurat object contains TPM data 'counts' slot name name dataset; used new unique IDs cells spike_in_col column annotation contains information spike_in counts, can used re-scale counts; mandatory spike_in scaling factor simulation additional_cols list column names annotation, stored well dataset object filter_genes boolean, TRUE, removes genes 0 expression samples & genes variance variance_cutoff variance_cutoff numeric, applied filter_genes TRUE: removes genes variance chosen cutoff type_abundance_cutoff numeric, remove cells, whose cell-type appears less given value. removes low abundant cell-types scale_tpm boolean, TRUE (default) cells tpm_matrix scaled sum 1e6","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_seurat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SummarizedExperiment using a Seurat object — dataset_seurat","text":"Return SummarizedExperiment object","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_seurat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build SummarizedExperiment using a Seurat object — dataset_seurat","text":"","code":"counts <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm))  colnames(counts) <- paste0(\"cell-\", rep(1:300)) colnames(tpm) <- paste0(\"cell-\", rep(1:300)) rownames(counts) <- paste0(\"gene-\", rep(1:1000)) rownames(tpm) <- paste0(\"gene-\", rep(1:1000))  annotation <- data.frame(   \"ID\" = paste0(\"cell-\", rep(1:300)),   \"cell_type\" = c(     rep(\"T cells CD4\", 50),     rep(\"T cells CD8\", 50),     rep(\"Macrophages\", 100),     rep(\"NK cells\", 10),     rep(\"B cells\", 70),     rep(\"Monocytes\", 20)   ),   row.names = paste0(\"cell-\", rep(1:300)) )  seurat_obj <- Seurat::CreateSeuratObject(counts = counts, assay = \"counts\", meta.data = annotation) tpm_assay <- Seurat::CreateAssayObject(counts = tpm) seurat_obj[[\"tpm\"]] <- tpm_assay  ds_seurat <- SimBu::dataset_seurat(   seurat_obj = seurat_obj,   count_assay = \"counts\",   cell_id_col = \"ID\",   cell_type_col = \"cell_type\",   tpm_assay = \"tpm\",   name = \"seurat_dataset\" )"},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SummarizedExperiment using a single sfaira entry ID — dataset_sfaira","title":"Build SummarizedExperiment using a single sfaira entry ID — dataset_sfaira","text":"Build SummarizedExperiment using single sfaira entry ID","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SummarizedExperiment using a single sfaira entry ID — dataset_sfaira","text":"","code":"dataset_sfaira(   sfaira_id,   sfaira_setup,   name = \"SimBu_dataset\",   spike_in_col = NULL,   additional_cols = NULL,   force = FALSE,   filter_genes = TRUE,   variance_cutoff = 0,   type_abundance_cutoff = 0,   scale_tpm = TRUE )"},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SummarizedExperiment using a single sfaira entry ID — dataset_sfaira","text":"sfaira_id (mandatory) ID sfaira dataset sfaira_setup (mandatory) sfaira setup; given setup_sfaira name name dataset; used new unique IDs cells spike_in_col column annotation contains information spike_in counts, can used re-scale counts additional_cols list column names annotation, stored well dataset object force boolean, TRUE, datasets without annotation downloaded, FALSE otherwise (default) filter_genes boolean, TRUE, removes genes 0 expression samples & genes variance variance_cutoff variance_cutoff numeric, applied filter_genes TRUE: removes genes variance chosen cutoff type_abundance_cutoff numeric, remove cells, whose cell-type appears less given value. removes low abundant cell-types scale_tpm boolean, TRUE (default) cells tpm_matrix scaled sum 1e6","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SummarizedExperiment using a single sfaira entry ID — dataset_sfaira","text":"dataset object","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build SummarizedExperiment using a single sfaira entry ID — dataset_sfaira","text":"","code":"# \\donttest{ setup_list <- SimBu::setup_sfaira(tempdir()) ds <- SimBu::dataset_sfaira(   sfaira_id = \"homosapiens_lungparenchyma_2019_10x3v2_madissoon_001_10.1186/s13059-019-1906-x\",   sfaira_setup = setup_list,   name = \"test_dataset\" ) # }"},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SummarizedExperiment using multiple sfaira entries — dataset_sfaira_multiple","title":"Build SummarizedExperiment using multiple sfaira entries — dataset_sfaira_multiple","text":"can apply different filters whole data-zoo sfaria; resulting single-cell datasets combined single dataset can use simulation Note: datasets sfaira annotation considered!","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SummarizedExperiment using multiple sfaira entries — dataset_sfaira_multiple","text":"","code":"dataset_sfaira_multiple(   organisms = NULL,   tissues = NULL,   assays = NULL,   sfaira_setup,   name = \"SimBu_dataset\",   spike_in_col = NULL,   additional_cols = NULL,   filter_genes = TRUE,   variance_cutoff = 0,   type_abundance_cutoff = 0,   scale_tpm = TRUE )"},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SummarizedExperiment using multiple sfaira entries — dataset_sfaira_multiple","text":"organisms (mandatory) list organisms (human mouse available) tissues (mandatory) list tissues assays (mandatory) list assays sfaira_setup (mandatory) sfaira setup; given setup_sfaira name name dataset; used new unique IDs cells spike_in_col column annotation contains information spike_in counts, can used re-scale counts additional_cols list column names annotation, stored well dataset object filter_genes boolean, TRUE, removes genes 0 expression samples & genes variance variance_cutoff variance_cutoff numeric, applied filter_genes TRUE: removes genes variance chosen cutoff type_abundance_cutoff numeric, remove cells, whose cell-type appears less given value. removes low abundant cell-types scale_tpm boolean, TRUE (default) cells tpm_matrix scaled sum 1e6","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SummarizedExperiment using multiple sfaira entries — dataset_sfaira_multiple","text":"dataset object","code":""},{"path":"https://omnideconv.org/SimBu/reference/dataset_sfaira_multiple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build SummarizedExperiment using multiple sfaira entries — dataset_sfaira_multiple","text":"","code":"# \\donttest{ setup_list <- SimBu::setup_sfaira(tempdir()) ds_human_lung <- SimBu::dataset_sfaira_multiple(   sfaira_setup = setup_list,   organisms = \"Homo sapiens\",   tissues = \"lung parenchyma\",   assay = \"10x 3' v2\",   name = \"human_lung\" ) # }"},{"path":"https://omnideconv.org/SimBu/reference/dmode.html","id":null,"dir":"Reference","previous_headings":"","what":"use gaussian kernel to calculate the mode of transcript counts — dmode","title":"use gaussian kernel to calculate the mode of transcript counts — dmode","text":"use gaussian kernel calculate mode transcript counts","code":""},{"path":"https://omnideconv.org/SimBu/reference/dmode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"use gaussian kernel to calculate the mode of transcript counts — dmode","text":"","code":"dmode(x)"},{"path":"https://omnideconv.org/SimBu/reference/dmode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"use gaussian kernel to calculate the mode of transcript counts — dmode","text":"x vector numeric values","code":""},{"path":"https://omnideconv.org/SimBu/reference/dmode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"use gaussian kernel to calculate the mode of transcript counts — dmode","text":"commonly occurring (log-transformed) TPM value","code":""},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira.html","id":null,"dir":"Reference","previous_headings":"","what":"download a specific dataset from sfaira by an ID — download_sfaira","title":"download a specific dataset from sfaira by an ID — download_sfaira","text":"download specific dataset sfaira ID","code":""},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"download a specific dataset from sfaira by an ID — download_sfaira","text":"","code":"download_sfaira(   setup_list,   ids,   force = FALSE,   synapse_user = NULL,   synapse_pw = NULL )"},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"download a specific dataset from sfaira by an ID — download_sfaira","text":"setup_list sfaira setup; given setup_sfaira ids IDs datasets force logical; TRUE want force download, even though cell-type annotation exists dataset. Default FALSE synapse_user character; username synapse portal (https://www.synapse.org) synapse_pw character; password synapse portal (https://www.synapse.org)","code":""},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"download a specific dataset from sfaira by an ID — download_sfaira","text":"matrix, gene names cell IDs","code":""},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira_multiple.html","id":null,"dir":"Reference","previous_headings":"","what":"download multiple datasets from sfaira using filters for organism, tissue and/or assay — download_sfaira_multiple","title":"download multiple datasets from sfaira using filters for organism, tissue and/or assay — download_sfaira_multiple","text":"similar filters sfaira website (https://theislab.github.io/sfaira-portal/Datasets)","code":""},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira_multiple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"download multiple datasets from sfaira using filters for organism, tissue and/or assay — download_sfaira_multiple","text":"","code":"download_sfaira_multiple(   setup_list,   organisms = NULL,   tissues = NULL,   assays = NULL,   force = FALSE )"},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira_multiple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"download multiple datasets from sfaira using filters for organism, tissue and/or assay — download_sfaira_multiple","text":"setup_list sfaira setup; given setup_sfaira organisms list organisms (human mouse available) tissues list tissues assays list assays force logical; TRUE want force download datasets, otherwise ones cell-type annotation returned. Default FALSE","code":""},{"path":"https://omnideconv.org/SimBu/reference/download_sfaira_multiple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"download multiple datasets from sfaira using filters for organism, tissue and/or assay — download_sfaira_multiple","text":"annotated data object, contains count matrix annotation","code":""},{"path":"https://omnideconv.org/SimBu/reference/filter_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"filter one (or two) expression matrix by genes — filter_matrix","title":"filter one (or two) expression matrix by genes — filter_matrix","text":"filter one (two) expression matrix genes","code":""},{"path":"https://omnideconv.org/SimBu/reference/filter_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"filter one (or two) expression matrix by genes — filter_matrix","text":"","code":"filter_matrix(m1, m2 = NULL, filter_genes = TRUE, variance_cutoff = 0)"},{"path":"https://omnideconv.org/SimBu/reference/filter_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"filter one (or two) expression matrix by genes — filter_matrix","text":"m1 Matrix 1 m2 Matrix 2 (optional) filter_genes boolean variance_cutoff numeric, genes variance value removed","code":""},{"path":"https://omnideconv.org/SimBu/reference/filter_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"filter one (or two) expression matrix by genes — filter_matrix","text":"filtered matrix","code":""},{"path":"https://omnideconv.org/SimBu/reference/generate_summarized_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate SummarizedExperiment using multiple parameters — generate_summarized_experiment","title":"Generate SummarizedExperiment using multiple parameters — generate_summarized_experiment","text":"Generate SummarizedExperiment using multiple parameters","code":""},{"path":"https://omnideconv.org/SimBu/reference/generate_summarized_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate SummarizedExperiment using multiple parameters — generate_summarized_experiment","text":"","code":"generate_summarized_experiment(   annotation,   count_matrix,   tpm_matrix,   name,   spike_in_col,   additional_cols,   filter_genes,   variance_cutoff,   type_abundance_cutoff,   scale_tpm )"},{"path":"https://omnideconv.org/SimBu/reference/generate_summarized_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate SummarizedExperiment using multiple parameters — generate_summarized_experiment","text":"annotation (mandatory) dataframe; needs columns 'ID' 'cell_type'; 'ID' needs equal cell_names count_matrix count_matrix (mandatory) sparse count matrix; raw count data expected genes rows, cells columns tpm_matrix sparse count matrix; TPM like count data expected genes rows, cells columns name name dataset; used new unique IDs cells spike_in_col column annotation contains information spike_in counts, can used re-scale counts; mandatory spike_in scaling factor simulation additional_cols list column names annotation, stored well dataset object filter_genes boolean, TRUE, removes genes 0 expression samples & genes variance variance_cutoff variance_cutoff numeric, applied filter_genes TRUE: removes genes variance chosen cutoff type_abundance_cutoff numeric, remove cells, whose cell-type appears less given value. removes low abundant cell-types scale_tpm boolean, TRUE (default) cells tpm_matrix scaled sum 1e6","code":""},{"path":"https://omnideconv.org/SimBu/reference/generate_summarized_experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate SummarizedExperiment using multiple parameters — generate_summarized_experiment","text":"Return SummarizedExperiment object","code":""},{"path":"https://omnideconv.org/SimBu/reference/h5ad_to_adata.html","id":null,"dir":"Reference","previous_headings":"","what":"Use basilisk environment to read h5ad file and access anndata object — h5ad_to_adata","title":"Use basilisk environment to read h5ad file and access anndata object — h5ad_to_adata","text":"Use basilisk environment read h5ad file access anndata object","code":""},{"path":"https://omnideconv.org/SimBu/reference/h5ad_to_adata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use basilisk environment to read h5ad file and access anndata object — h5ad_to_adata","text":"","code":"h5ad_to_adata(h5ad_path, cells_in_obs)"},{"path":"https://omnideconv.org/SimBu/reference/h5ad_to_adata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use basilisk environment to read h5ad file and access anndata object — h5ad_to_adata","text":"h5ad_path path h5ad file cells_in_obs boolean, TRUE, cell identifiers taken obs layer anndata object; FALSE, taken var","code":""},{"path":"https://omnideconv.org/SimBu/reference/h5ad_to_adata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use basilisk environment to read h5ad file and access anndata object — h5ad_to_adata","text":"matrix contained h5ad file dgCMatrix","code":""},{"path":"https://omnideconv.org/SimBu/reference/merge_scaling_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create scaling vector from custom or pre-defined scaling factor — merge_scaling_factor","title":"Create scaling vector from custom or pre-defined scaling factor — merge_scaling_factor","text":"Create scaling vector custom pre-defined scaling factor","code":""},{"path":"https://omnideconv.org/SimBu/reference/merge_scaling_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create scaling vector from custom or pre-defined scaling factor — merge_scaling_factor","text":"","code":"merge_scaling_factor(data, scaling_factor_values, scaling_factor_name)"},{"path":"https://omnideconv.org/SimBu/reference/merge_scaling_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create scaling vector from custom or pre-defined scaling factor — merge_scaling_factor","text":"data dataset scaling_factor_values named list scaling values scaling_factor_name name scaling factor method","code":""},{"path":"https://omnideconv.org/SimBu/reference/merge_scaling_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create scaling vector from custom or pre-defined scaling factor — merge_scaling_factor","text":"scaling vector","code":""},{"path":"https://omnideconv.org/SimBu/reference/merge_simulations.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine multiple simulations into one result — merge_simulations","title":"Combine multiple simulations into one result — merge_simulations","text":"recommend merge simulations dataset object, otherwise count matrices might correspond gene level","code":""},{"path":"https://omnideconv.org/SimBu/reference/merge_simulations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine multiple simulations into one result — merge_simulations","text":"","code":"merge_simulations(simulation_list)"},{"path":"https://omnideconv.org/SimBu/reference/merge_simulations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine multiple simulations into one result — merge_simulations","text":"simulation_list list simulations","code":""},{"path":"https://omnideconv.org/SimBu/reference/merge_simulations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine multiple simulations into one result — merge_simulations","text":"named list; bulk SummarizedExperiment object, assays store simulated bulk RNAseq datasets. Can hold either one two assays, depending many matrices present dataset cell-fractions dataframe simulated cell-fractions per sample; scaling_vector scaling value cell dataset","code":""},{"path":"https://omnideconv.org/SimBu/reference/merge_simulations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine multiple simulations into one result — merge_simulations","text":"","code":"counts <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm))  colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000))  annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(     rep(\"T cells CD4\", 50),     rep(\"T cells CD8\", 50),     rep(\"Macrophages\", 100),     rep(\"NK cells\", 10),     rep(\"B cells\", 70),     rep(\"Monocytes\", 20)   ) )  dataset <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   tpm_matrix = tpm,   name = \"test_dataset\" )  s1 <- SimBu::simulate_bulk(dataset,   scenario = \"even\",   scaling_factor = \"NONE\",   nsamples = 10,   ncells = 100 )  s2 <- SimBu::simulate_bulk(dataset,   scenario = \"even\",   scaling_factor = \"NONE\",   nsamples = 10,   ncells = 100 )  s <- SimBu::merge_simulations(list(s1, s2))"},{"path":"https://omnideconv.org/SimBu/reference/plot_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cell-type fractions in your simulated dataset — plot_simulation","title":"Plot the cell-type fractions in your simulated dataset — plot_simulation","text":"Plot cell-type fractions simulated dataset","code":""},{"path":"https://omnideconv.org/SimBu/reference/plot_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cell-type fractions in your simulated dataset — plot_simulation","text":"","code":"plot_simulation(simulation)"},{"path":"https://omnideconv.org/SimBu/reference/plot_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cell-type fractions in your simulated dataset — plot_simulation","text":"simulation simulation object generated simulate_bulk","code":""},{"path":"https://omnideconv.org/SimBu/reference/plot_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the cell-type fractions in your simulated dataset — plot_simulation","text":"gpplot2 barplot","code":""},{"path":"https://omnideconv.org/SimBu/reference/plot_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the cell-type fractions in your simulated dataset — plot_simulation","text":"","code":"counts <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm))  colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000))  annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(     rep(\"T cells CD4\", 50),     rep(\"T cells CD8\", 50),     rep(\"Macrophages\", 100),     rep(\"NK cells\", 10),     rep(\"B cells\", 70),     rep(\"Monocytes\", 20)   ) )  dataset <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   tpm_matrix = tpm,   name = \"test_dataset\" )  s <- SimBu::simulate_bulk(dataset,   scenario = \"even\",   scaling_factor = \"NONE\",   nsamples = 10,   ncells = 100 )  SimBu::plot_simulation(s)"},{"path":"https://omnideconv.org/SimBu/reference/save_simulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the expression matrix of a simulated pseudo-bulk dataset to a file — save_simulation","title":"Save the expression matrix of a simulated pseudo-bulk dataset to a file — save_simulation","text":"Save expression matrix simulated pseudo-bulk dataset file","code":""},{"path":"https://omnideconv.org/SimBu/reference/save_simulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the expression matrix of a simulated pseudo-bulk dataset to a file — save_simulation","text":"","code":"save_simulation(simulation, filename, assay = \"bulk_counts\")"},{"path":"https://omnideconv.org/SimBu/reference/save_simulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the expression matrix of a simulated pseudo-bulk dataset to a file — save_simulation","text":"simulation result simulate_bulk() filename filename save expression matrix assay name assay simulation save, default bulk_counts","code":""},{"path":"https://omnideconv.org/SimBu/reference/save_simulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the expression matrix of a simulated pseudo-bulk dataset to a file — save_simulation","text":"write file","code":""},{"path":"https://omnideconv.org/SimBu/reference/save_simulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the expression matrix of a simulated pseudo-bulk dataset to a file — save_simulation","text":"","code":"counts <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm))  colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000))  annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(     rep(\"T cells CD4\", 50),     rep(\"T cells CD8\", 50),     rep(\"Macrophages\", 100),     rep(\"NK cells\", 10),     rep(\"B cells\", 70),     rep(\"Monocytes\", 20)   ) )  dataset <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   tpm_matrix = tpm,   name = \"test_dataset\" )  s <- SimBu::simulate_bulk(dataset,   scenario = \"even\",   scaling_factor = \"NONE\",   nsamples = 10,   ncells = 100 )  save_simulation(s, tempfile())"},{"path":"https://omnideconv.org/SimBu/reference/setup_sfaira.html","id":null,"dir":"Reference","previous_headings":"","what":"setup the sfaira package — setup_sfaira","title":"setup the sfaira package — setup_sfaira","text":"want download datasets Sfaira, need specify directory datasets saved . Additionally, function called first time, conda environment established sfaira along dependencies installed. can take time performed one single time, environment can re-used.","code":""},{"path":"https://omnideconv.org/SimBu/reference/setup_sfaira.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"setup the sfaira package — setup_sfaira","text":"","code":"setup_sfaira(basedir)"},{"path":"https://omnideconv.org/SimBu/reference/setup_sfaira.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"setup the sfaira package — setup_sfaira","text":"basedir name directory, raw files downloaded ","code":""},{"path":"https://omnideconv.org/SimBu/reference/setup_sfaira.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"setup the sfaira package — setup_sfaira","text":"list sfaira file directories; must used input sfaira based functions","code":""},{"path":"https://omnideconv.org/SimBu/reference/setup_sfaira.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"setup the sfaira package — setup_sfaira","text":"","code":"setup_list <- setup_sfaira(basedir = tempdir())"},{"path":"https://omnideconv.org/SimBu/reference/sfaira_overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Gives an overview of the possible datasets you can use from the sfaira database — sfaira_overview","title":"Gives an overview of the possible datasets you can use from the sfaira database — sfaira_overview","text":"Gives overview possible datasets can use sfaira database","code":""},{"path":"https://omnideconv.org/SimBu/reference/sfaira_overview.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gives an overview of the possible datasets you can use from the sfaira database — sfaira_overview","text":"","code":"sfaira_overview(setup_list)"},{"path":"https://omnideconv.org/SimBu/reference/sfaira_overview.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gives an overview of the possible datasets you can use from the sfaira database — sfaira_overview","text":"setup_list sfaira setup; given setup_sfaira","code":""},{"path":"https://omnideconv.org/SimBu/reference/sfaira_overview.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gives an overview of the possible datasets you can use from the sfaira database — sfaira_overview","text":"dataframe information dataset","code":""},{"path":"https://omnideconv.org/SimBu/reference/sfaira_overview.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gives an overview of the possible datasets you can use from the sfaira database — sfaira_overview","text":"","code":"# \\donttest{   setup_list <- setup_sfaira(basedir=tempdir())   # all_datasets <- sfaira_overview(setup_list) # }"},{"path":"https://omnideconv.org/SimBu/reference/simulate_bulk.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate whole pseudo-bulk RNAseq dataset — simulate_bulk","title":"Simulate whole pseudo-bulk RNAseq dataset — simulate_bulk","text":"function allows create full pseudo-bulk RNAseq dataset. need provide SummarizedExperiment cells sampled simulation. Also scenario selected, can choose cells sampled scaling_factor read counts transformed proir simulation.","code":""},{"path":"https://omnideconv.org/SimBu/reference/simulate_bulk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate whole pseudo-bulk RNAseq dataset — simulate_bulk","text":"","code":"simulate_bulk(   data,   scenario = c(\"even\", \"random\", \"mirror_db\", \"weighted\", \"pure\", \"custom\"),   scaling_factor = c(\"NONE\", \"census\", \"spike_in\", \"custom\", \"read_number\",     \"expressed_genes\", \"annotation_column\", \"epic\", \"abis\", \"quantiseq\"),   scaling_factor_single_cell = TRUE,   weighted_cell_type = NULL,   weighted_amount = NULL,   pure_cell_type = NULL,   custom_scenario_data = NULL,   custom_scaling_vector = NULL,   balance_even_mirror_scenario = 0.01,   remove_bias_in_counts = FALSE,   remove_bias_in_counts_method = \"read-number\",   norm_counts = FALSE,   nsamples = 100,   ncells = 1000,   total_read_counts = NULL,   whitelist = NULL,   blacklist = NULL,   BPPARAM = BiocParallel::bpparam(),   run_parallel = FALSE )"},{"path":"https://omnideconv.org/SimBu/reference/simulate_bulk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate whole pseudo-bulk RNAseq dataset — simulate_bulk","text":"data (mandatory) SummarizedExperiment object scenario (mandatory) select pre-defined cell-type fraction scenarios; possible : even,random,mirror_db,pure,weighted; can also use custom scenario, need set custom_scenario_data parameter. scaling_factor (mandatory) name scaling factor; possible : census, spike_in, read_number, expressed_genes, custom, epic, abis, quantiseq NONE scaling factor scaling_factor_single_cell boolean: decide scaling value single cell calculated (default) median scaling values cell type calculated weighted_cell_type name cell-type used weighted scenario weighted_amount fraction cell-type used weighted scenario; must 0 0.99 pure_cell_type name cell-type pure scenario custom_scenario_data dataframe; needs size nsamples x number_of_cell_types, sample row entry cell-type fraction. Rows need sum 1. custom_scaling_vector named vector custom scaling values cell-types. Cell-types occur vector present dataset set 1; mandatory custom scaling factor balance_even_mirror_scenario balancing value uniform mirror_db scenarios: increasing result diverse simulated fractions. get fractions sample, set 0. Default 0.01. remove_bias_in_counts boolean; TRUE internal mRNA bias present count data removed using number reads mapped cell. Default FALSE remove_bias_in_counts_method 'read-number' (default) 'gene-number'; method mRNA bias counts removed norm_counts boolean; TRUE samples simulated counts normalized CPMs, default FALSE nsamples numeric; number samples pseudo-bulk RNAseq dataset (default = 100) ncells numeric; number cells dataset (default = 1000) total_read_counts numeric; sets total read count value sample whitelist list; give list cell-types want keep simulation; NULL, used blacklist list; give list cell-types want remove simulation; NULL, used; applied whitelist BPPARAM BiocParallel::bpparam() default; specific number threads x want used, insert: BiocParallel::MulticoreParam(workers = x) run_parallel boolean, decide multi-threaded calculation run. FALSE default","code":""},{"path":"https://omnideconv.org/SimBu/reference/simulate_bulk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate whole pseudo-bulk RNAseq dataset — simulate_bulk","text":"named list; bulk SummarizedExperiment object, assays store simulated bulk RNAseq datasets. Can hold either one two assays, depending many matrices present dataset cell-fractions dataframe simulated cell-fractions per sample; scaling_vector scaling value cell dataset","code":""},{"path":"https://omnideconv.org/SimBu/reference/simulate_bulk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate whole pseudo-bulk RNAseq dataset — simulate_bulk","text":"","code":"# generate sample single-cell data to work with:  counts <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::Matrix(matrix(stats::rpois(3e5, 5), ncol = 300), sparse = TRUE) tpm <- Matrix::t(1e6 * Matrix::t(tpm) / Matrix::colSums(tpm))  colnames(counts) <- paste0(\"cell_\", rep(1:300)) colnames(tpm) <- paste0(\"cell_\", rep(1:300)) rownames(counts) <- paste0(\"gene_\", rep(1:1000)) rownames(tpm) <- paste0(\"gene_\", rep(1:1000))  annotation <- data.frame(   \"ID\" = paste0(\"cell_\", rep(1:300)),   \"cell_type\" = c(     rep(\"T cells CD4\", 50),     rep(\"T cells CD8\", 50),     rep(\"Macrophages\", 100),     rep(\"NK cells\", 10),     rep(\"B cells\", 70),     rep(\"Monocytes\", 20)   ) )  dataset <- SimBu::dataset(   annotation = annotation,   count_matrix = counts,   tpm_matrix = tpm,   name = \"test_dataset\" )  # this creates a basic pseudo-bulk dataset with uniform cell-type distribution # and no additional transformation of the data with 10 samples and 2000 cells each  s <- SimBu::simulate_bulk(dataset,   scenario = \"even\",   scaling_factor = \"NONE\",   nsamples = 10,   ncells = 100 )  # use a blacklist to exclude certain cell-types for the simulation s <- SimBu::simulate_bulk(dataset,   scenario = \"even\",   scaling_factor = \"NONE\",   nsamples = 10,   ncells = 2000,   blacklist = c(\"Monocytes\", \"Macrophages\") )   # use the pure scenario to only have B cells s <- SimBu::simulate_bulk(dataset,   scenario = \"pure\",   scaling_factor = \"NONE\",   nsamples = 10,   ncells = 100,   pure_cell_type = \"B cells\" )  # simulate a dataset with custom cell-type fraction for each of the 3 samples fractions <- data.frame(   \"B cells\" = c(0.2, 0.4, 0.2),   \"T cells CD4\" = c(0.4, 0.2, 0.1),   \"Macrophages\" = c(0.4, 0.4, 0.7), check.names = FALSE ) s <- SimBu::simulate_bulk(dataset,   scenario = \"custom\",   scaling_factor = \"NONE\",   nsamples = 3,   ncells = 2000,   custom_scenario_data = fractions )"},{"path":"https://omnideconv.org/SimBu/reference/simulate_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate single pseudo-bulk sample — simulate_sample","title":"simulate single pseudo-bulk sample — simulate_sample","text":"function sample cells according given cell-type fractions. creates single pseudo-bulk sample calculating mean expression value per gene sampled cells. Note: total_read_counts used, cell-fractions applied number counts, number cells!","code":""},{"path":"https://omnideconv.org/SimBu/reference/simulate_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate single pseudo-bulk sample — simulate_sample","text":"","code":"simulate_sample(   data,   scaling_vector,   simulation_vector,   total_cells,   total_read_counts,   remove_bias_in_counts,   remove_bias_in_counts_method,   norm_counts )"},{"path":"https://omnideconv.org/SimBu/reference/simulate_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate single pseudo-bulk sample — simulate_sample","text":"data SummarizedExperiment object scaling_vector vector scaling values cell; calculated calc_scaling_vector function simulation_vector named vector wanted cell-types fractions total_cells numeric; number total cells simulation total_read_counts numeric; sets total read count value sample remove_bias_in_counts boolean; TRUE (default) internal mRNA bias present count data removed using number reads mapped cell remove_bias_in_counts_method 'read-number' (default) 'gene-number'; method mRNA bias counts removed norm_counts boolean; TRUE samples simulated counts normalized CPMs, default FALSE","code":""},{"path":"https://omnideconv.org/SimBu/reference/simulate_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate single pseudo-bulk sample — simulate_sample","text":"returns two vectors (one based counts, one based tpm; depends matrices present data) expression values genes provided dataset","code":""}]
