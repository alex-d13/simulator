"0","```r
sim_hao <- mclapply(1: dim(finotello_pbmc_counts)[2], function(true_sample){
  fractions <- finotello_pbmc_facs[,true_sample]
  names(fractions) <- rownames(finotello_pbmc_facs)
  fractions <- fractions[names(fractions) != \"other\"]
  #fractions <- fractions[names(fractions) != \"T regulatory cells\"]
  fractions <- fractions[names(fractions) != \"Neutrophils\"]
  #re-scale fractions to sum to 1, otherwise error in simulator
  fractions <- fractions/sum(fractions)
  
  # create dataframe with custom cell type fractions -> all 10 based on the current true bulk sample
  custom_scenario_data <- cbind(fractions, fractions, fractions,fractions, fractions, fractions,fractions, fractions,fractions, fractions)
  colnames(custom_scenario_data) <- paste0(\"sample\",rep(1:10))
  custom_scenario_data <- t(custom_scenario_data)

  sequencing_depth <- sum(finotello_pbmc_counts[,true_sample])
  
  
  sim_counts <- SimBu::simulate_bulk(data = hao, 
                                     scenario = 'custom',
                                     custom_scenario_data = custom_scenario_data,
                                     scaling_factor = 'NONE', 
                                     nsamples = nsamples, 
                                     total_read_counts = sequencing_depth, 
                                     #whitelist = whitelist_hao, # whitelist is not necessary as sim_vector is given by custom scenario 
                                     ncells = ncells, 
                                     ncores = nsamples, 
                                     remove_bias_in_counts = remove_bias_in_counts, 
                                     norm_counts = F)   # do not normalize counts to CPMs here, otherwise we cannot compare with true bulk
  
  return(list(counts=assays(sim_counts$bulk)[['bulk_counts']], tpm=assays(sim_counts$bulk)[['bulk_tpm']]))
  
  
}, mc.cores=dim(finotello_pbmc_counts)[2])
```"
